name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  DOTNET_VERSION: '8.0.x'
  GITVERSION_VERSION: '5.12.0'
  # Optional: Use a Personal Access Token if GITHUB_TOKEN doesn't work
  # Uncomment the line below and create a secret named GITHUB_PAT with write:packages permission
  # PUBLISH_TOKEN: ${{ secrets.GITHUB_PAT || secrets.GITHUB_TOKEN }}

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/
    
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: TestResults/*/coverage.cobertura.xml
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive || true
        dotnet list package --deprecated --include-transitive || true

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: ${{ env.GITVERSION_VERSION }}
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
      continue-on-error: true
    
    - name: Fallback Version (if GitVersion fails)
      id: fallback-version
      if: steps.gitversion.outcome == 'failure'
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "nuGetVersionV2=1.0.0-beta.pr.${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "semVer=1.0.0-beta.pr.${{ github.event.number }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "nuGetVersionV2=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "semVer=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "nuGetVersionV2=1.0.${{ github.run_number }}-alpha" >> $GITHUB_OUTPUT
          echo "semVer=1.0.${{ github.run_number }}-alpha" >> $GITHUB_OUTPUT
        else
          echo "nuGetVersionV2=1.0.${{ github.run_number }}-feature" >> $GITHUB_OUTPUT
          echo "semVer=1.0.${{ github.run_number }}-feature" >> $GITHUB_OUTPUT
        fi
    
    - name: Set Final Version
      id: version
      run: |
        if [ "${{ steps.gitversion.outcome }}" = "success" ]; then
          echo "nuGetVersionV2=${{ steps.gitversion.outputs.nuGetVersionV2 }}" >> $GITHUB_OUTPUT
          echo "semVer=${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_OUTPUT
        else
          echo "nuGetVersionV2=${{ steps.fallback-version.outputs.nuGetVersionV2 }}" >> $GITHUB_OUTPUT
          echo "semVer=${{ steps.fallback-version.outputs.semVer }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Display Version Information
      run: |
        echo "Final Version: ${{ steps.version.outputs.nuGetVersionV2 }}"
        echo "SemVer: ${{ steps.version.outputs.semVer }}"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build Release
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.version.outputs.nuGetVersionV2 }}
    
    - name: Create NuGet Package
      run: dotnet pack CognitiveGraph/CognitiveGraph.csproj --configuration Release --no-build --output nupkgs/ -p:PackageVersion=${{ steps.version.outputs.nuGetVersionV2 }}
    
    - name: Upload NuGet Package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: nupkgs/*.nupkg

  publish-prerelease:
    name: Publish Prerelease to GitHub Packages
    runs-on: ubuntu-latest
    needs: package
    # Only publish prereleases for develop branch (alpha) or pull requests to main (beta)
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Prerelease Conditions
      run: |
        echo "Validating prerelease conditions..."
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        
        if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "✓ Publishing alpha version from develop branch"
        elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.base_ref }}" = "main" ]; then
          echo "✓ Publishing beta version for pull request to main (PR #${{ github.event.number }})"
        else
          echo "❌ ERROR: Invalid conditions for prerelease"
          echo "Expected: develop branch OR pull request to main"
          exit 1
        fi
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Download NuGet Package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nupkgs/
    
    - name: Debug GitHub Context
      run: |
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Token length: ${#GITHUB_TOKEN}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to GitHub Packages
      run: |
        # Try multiple authentication approaches for GitHub Packages
        echo "Attempting to publish to GitHub Packages..."
        
        # Method 1: Using github.actor (recommended for organization repos)
        if dotnet nuget add source --username "${{ github.actor }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DevelApp-ai/index.json" 2>/dev/null; then
          echo "✓ NuGet source added successfully with github.actor"
        else
          echo "⚠ Failed to add NuGet source with github.actor, trying alternative..."
          # Method 2: Using repository_owner as fallback
          dotnet nuget add source --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DevelApp-ai/index.json"
        fi
        
        # Attempt to push the package
        if dotnet nuget push nupkgs/*.nupkg --source "github" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate; then
          echo "✓ Package published successfully to GitHub Packages"
        else
          echo "❌ Failed to publish to GitHub Packages"
          echo "This might be due to:"
          echo "1. GITHUB_TOKEN lacks 'packages: write' permission"
          echo "2. Organization security settings blocking package publishing"
          echo "3. Repository settings not allowing GitHub Packages"
          echo ""
          echo "To resolve, consider:"
          echo "1. Use a Personal Access Token with 'write:packages' scope"
          echo "2. Check organization package publishing settings"  
          echo "3. Verify repository has GitHub Packages enabled"
          exit 1
        fi

  publish-release:
    name: Publish Release to GitHub and NuGet.org
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion and tagging
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: ${{ env.GITVERSION_VERSION }}
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
      continue-on-error: true
    
    - name: Fallback Version (if GitVersion fails)
      id: fallback-version
      if: steps.gitversion.outcome == 'failure'
      run: |
        # Only create production versions for main branch pushes
        if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
          echo "nuGetVersionV2=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "semVer=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
        else
          echo "❌ Fallback version should not run for non-main branch releases"
          exit 1
        fi
    
    - name: Set Final Version
      id: version
      run: |
        if [ "${{ steps.gitversion.outcome }}" = "success" ]; then
          echo "nuGetVersionV2=${{ steps.gitversion.outputs.nuGetVersionV2 }}" >> $GITHUB_OUTPUT
          echo "semVer=${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_OUTPUT
        else
          echo "nuGetVersionV2=${{ steps.fallback-version.outputs.nuGetVersionV2 }}" >> $GITHUB_OUTPUT
          echo "semVer=${{ steps.fallback-version.outputs.semVer }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Download NuGet Package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nupkgs/
    
    - name: Create Release Tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.semVer }}" -m "Release v${{ steps.version.outputs.semVer }}"
        git push origin "v${{ steps.version.outputs.semVer }}"
    
    - name: Validate Release Conditions
      run: |
        echo "Validating release conditions..."
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "❌ ERROR: Production release can only be created from main branch"
          echo "Current ref: ${{ github.ref }}"
          exit 1
        fi
        
        if [ "${{ github.event_name }}" != "push" ]; then
          echo "❌ ERROR: Production release can only be created from direct push to main"
          echo "Current event: ${{ github.event_name }}"
          exit 1
        fi
        
        echo "✓ Release conditions validated successfully"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.semVer }}
        name: Release v${{ steps.version.outputs.semVer }}
        body: |
          ## Release v${{ steps.version.outputs.semVer }}
          
          ### NuGet Package
          - **Package**: DevelApp.CognitiveGraph
          - **Version**: ${{ steps.version.outputs.semVer }}
          - **Available on**: [NuGet.org](https://www.nuget.org/packages/DevelApp.CognitiveGraph/${{ steps.version.outputs.semVer }}) and [GitHub Packages](https://github.com/DevelApp-ai/CognitiveGraph/packages)
          
          ### Installation
          ```bash
          dotnet add package DevelApp.CognitiveGraph --version ${{ steps.version.outputs.semVer }}
          ```
        draft: false
        prerelease: false
        files: |
          nupkgs/DevelApp.CognitiveGraph.${{ steps.version.outputs.semVer }}.nupkg
    
    - name: Debug GitHub Context
      run: |
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Token length: ${#GITHUB_TOKEN}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to GitHub Packages
      run: |
        # Try multiple authentication approaches for GitHub Packages
        echo "Attempting to publish to GitHub Packages..."
        
        # Method 1: Using github.actor (recommended for organization repos)
        if dotnet nuget add source --username "${{ github.actor }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DevelApp-ai/index.json" 2>/dev/null; then
          echo "✓ NuGet source added successfully with github.actor"
        else
          echo "⚠ Failed to add NuGet source with github.actor, trying alternative..."
          # Method 2: Using repository_owner as fallback
          dotnet nuget add source --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DevelApp-ai/index.json"
        fi
        
        # Attempt to push the package
        if dotnet nuget push nupkgs/*.nupkg --source "github" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate; then
          echo "✓ Package published successfully to GitHub Packages"
        else
          echo "❌ Failed to publish to GitHub Packages"
          echo "This might be due to:"
          echo "1. GITHUB_TOKEN lacks 'packages: write' permission"
          echo "2. Organization security settings blocking package publishing"
          echo "3. Repository settings not allowing GitHub Packages"
          echo ""
          echo "To resolve, consider:"
          echo "1. Use a Personal Access Token with 'write:packages' scope in secrets"
          echo "2. Check organization package publishing settings"
          echo "3. Verify repository has GitHub Packages enabled"
          echo "4. Contact repository administrator for token permissions"
          exit 1
        fi
    
    - name: Publish to NuGet.org
      run: dotnet nuget push nupkgs/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate